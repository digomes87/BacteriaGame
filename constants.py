SCREEN_WIDTH = 640
SCREEN_HEIGHT = 480
WORLD_SIZE = 2000 + 40*(2000-SCREEN_WIDTH)

GAME_OVER = -42
GAME_WON = 42

WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
HEALTHBAR_BG_GREEN = (96, 147, 91, 60)
HEALTHBAR_GREEN = (35, 230, 14, 120)
ENERGY_ORANGE = (255, 174, 0, 100)
MEMBRANE_GREEN = (55, 210, 6, 120)
HEALTHBAR_HEIGHT = 10

ENERGY_BAR_HEIGHT = 20.0
MEMBRANE_BAR_HEIGHT = 22.0
ENERGY_BAR_WIDTH = 300.0
MEMBRANE_BAR_WIDTH = 300.0

BULLET_ENERGY_COST = 3
ANTIBODY_ENERGY_COST = 1

ENERGY_BALL_INCREASE = 19
PLAYER_ENERGY_DECAY_RATE = 0.003
PLAYER_MEMBRANE_HEAL_RATE = 0.03

TRANSPARENT_COLOR = (255, 0, 255)

COMPLETION_INDICATION_PERIOD = 10000

FLOOR_Y = 320

PLAYER_INITIAL_X = 20
PLAYER_SPEED = 0.5
POSITIVE_SCROLL_THRESHOLD = 150
NEGATIVE_SCROLL_THRESHOLD = 60

#for AABB and others, so that we dont need to deal with the indexes
X = 0
Y = 1
W = 2
H = 3

ANTIBODY_LINE_LENGTH = 14
ANTIBODY_COLOR = (171, 25, 227)
ANTIBODY_CAST_SPEED = 0.5

BULLET_SPEED = 0.4
BULLET_DAMAGE = 12
ENEMY_BULLET_SPEED = 0.5
ENEMY_BULLET_DAMAGE = 6
ENEMY_BULLET_PERIOD = 40
BACTERIA_1_BULLET_MAX_NUMBER = 25
BACTERIA_2_BULLET_MAX_NUMBER = 60

# just for clear type differentiation
BACTERIA_1 = 1
BACTERIA_2 = 2
ENERGY = 3
BULLET = 4
ENEMY_BULLET = 5
BACTERIA_1_ANTIBODY_NEUTRALISATION_THRESHOLD = 30
BACTERIA_2_ANTIBODY_NEUTRALISATION_THRESHOLD = 81
BACTERIA_1_STATE_NORMAL = 1
BACTERIA_2_STATE_NORMAL = 2
BACTERIA_1_STATE_PISSED_OFF = 3
BACTERIA_2_STATE_PISSED_OFF = 4
NORMAL_STATE_SHIFT = 0
PISSED_OFF_STATE_SHIFT = 2
BACTERIA_PISSED_OFF_PROXIMITY_THRESHOLD = 500
BACTERIA_REPAIR_SPEED = 0.005
BACTERIA_DENEUTRALIZATION_THRESHOLD = 5000
BACTERIA_MOVEMENT_PROXIMITY_THRESHOLD = SCREEN_WIDTH
BACTERIA_SPEED = 0.01

GRAVITY = 0.0005 # arbitrary

# for info text
TEXT = 0
SIZE = 1
COLOR = 2
POS = 3
SPEED = 4
FADEOUT = 5
DURATION = 6

# sounds
SOUND_ANTIBODIES = 0
SOUND_BULLET = 1
SOUND_DENEUTRALIZE = 2
SOUND_END = 3
SOUND_ENEMY_BULLET = 4
SOUND_ENERGY = 5
SOUND_NEUTRALIZE = 6
SOUND_START = 7

def AABB_crop(aabb, n_pixels):
    return [aabb[X] + n_pixels,
            aabb[Y] + n_pixels,
            aabb[W] - 2*n_pixels,
            aabb[H] - 2*n_pixels]

def AABB_center(aabb):
    return [aabb[X] + aabb[W]/2.0, aabb[Y]+aabb[H]/2.0]

def inter_AABB_collision(aabb1, aabb2):
    if(aabb1[X] > aabb2[X] + aabb2[W]):
        return False
    if(aabb1[X] + aabb1[W] < aabb2[X]):
        return False
    if(aabb1[Y] > aabb2[Y] + aabb2[H]):
        return False
    if(aabb1[Y] + aabb1[H] < aabb2[Y]):
        return False
    return True